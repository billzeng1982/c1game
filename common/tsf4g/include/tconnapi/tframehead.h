/********************************************************************
**       This head file is generated by program,                   **
**            Please do not change it directly.                    **
********************************************************************/

#ifndef TFRAMEHEAD_H
#define TFRAMEHEAD_H


#ifndef TDR_METALIB_TFRAMEHEAD_VERSION 
#define TDR_METALIB_TFRAMEHEAD_VERSION 	15 /*version of metalib*/
#endif

#ifndef TDR_METALIB_TFRAMEHEAD_HASH 
#define TDR_METALIB_TFRAMEHEAD_HASH 	"c203998159fda1216537e867e0e686a7" /*hash of metalib*/
#endif

/*   Define c types.   */
#ifndef TDR_CUSTOM_C_TYPES
#define TDR_CUSTOM_C_TYPES
    #include <stddef.h>
    #include <time.h>
    #include <sys/types.h>

    #if !defined(_WIN32) && !defined(_WIN64)

        #include <stdint.h>
        #include <inttypes.h>

    #else /*if !defined(_WIN32) && !defined(_WIN64)*/

        //The stdint declaras
        typedef  signed char  int8_t;
        typedef  short int16_t;
        typedef  int   int32_t;
        typedef unsigned char  uint8_t;
        typedef unsigned short uint16_t;
        typedef unsigned int   uint32_t;
        #if _MSC_VER >= 1300
            typedef unsigned long long 	uint64_t;
            typedef long long 	int64_t;
        #else /* _MSC_VER */
            typedef unsigned __int64	uint64_t;
            typedef __int64	int64_t;
        #endif /* _MSC_VER */

    #endif /*if !defined(_WIN32) && !defined(_WIN64)*/

    typedef int64_t tdr_longlong;
    typedef uint64_t tdr_ulonglong;
    typedef uint16_t tdr_wchar_t;  /**<Wchar基本数据类型*/
    typedef uint32_t tdr_date_t;	/**<data基本数据类型*/
    typedef uint32_t tdr_time_t;	/**<time基本数据类型*/
    typedef uint64_t tdr_datetime_t; /**<datetime基本数据类型*/
    typedef uint32_t tdr_ip_t;  /**<IPv4数据类型*/
#endif /*TDR_CUSTOM_C_TYPES*/


/*   User defined includes.   */


/*   User defined macros.   */

/* TFRAMEHEAD_CMD_ID*/
enum tagTFRAMEHEAD_CMD_ID 
{
    TFRAMEHEAD_CMD_START = 0, 	/* 连接初始包,双向 */
    TFRAMEHEAD_CMD_STOP = 1, 	/* 连接断开包,双向 */
    TFRAMEHEAD_CMD_INPROC = 2, 	/* 通信包,双向 */
    TFRAMEHEAD_CMD_RELAY = 3, 	/* 重连包,双向 */
    TFRAMEHEAD_CMD_NOTIFY = 4, 	/* 预占连接包,双向 */
    TFRAMEHEAD_CMD_SETROUTING = 5, 	/* 路由跳转包,方向server->tconnd */
    TFRAMEHEAD_CMD_RSP_SETROUTING = 6, 	/* 路由跳转回应包 */
    TFRAMEHEAD_CMD_SETCONNLIMIT = 7, 	/* 服务器连接限制设置包,方向server->tconnd */
    TFRAMEHEAD_CMD_RSP_SETCONNLIMIT = 8, 	/* 服务器连接限制设置返回包 */
    TFRAMEHEAD_CMD_HEARTBEAT = 9, 	/* 服务器检查tconnd心跳包,双向 */
    TFRAMEHEAD_CMD_EXGVER = 10, 	/* 逻辑服务器向tconnd上报其版本,双向 */
    TFRAMEHEAD_CMD_WAITNUM_REQ = 11, 	/* 服务器请求当前等待连接的客户端数量,方向server->tconnd */
    TFRAMEHEAD_CMD_WAITNUM_RSP = 12, 	/* 服务器请求当前等待连接的客户端数量的应答包,方向tconnd->server */
    TFRAMEHEAD_CMD_WEBSTART = 20, 	/* WEBGAME，连接初始包，双向 */
    TFRAMEHEAD_CMD_WEBINPROC = 21, 	/* WEBGAME，正常通信，上行 */
    TFRAMEHEAD_CMD_WEBSTOP = 22, 	/* WEBGAME，连接断开，上行 */
    TFRAMEHEAD_CMD_WEBRESP = 23, 	/* WEBGAME，通用下行包，下行 */
    TFRAMEHEAD_CMD_REGISTER_ROUTING = 24, 	/* 服务器设置业务路由请求, server->tconnd */
    TFRAMEHEAD_CMD_TCONND_REBOOT = 25, 	/* tconnd启动的时候发送,tconnd->server */
    TFRAMEHEAD_CMD_WEB_BOARDCAST = 26, 	/* WEBGAME，组播包，下行 */
    TFRAMEHEAD_CMD_WEB_BROADCAST_ALL = 27, 	/* WEBGAME, 广播包，下行 */
    TFRAMEHEAD_CMD_WEB_BROADCAST_ALL_RSP = 28, 	/* WEBGAEM,广播应答包，用于回应广播包是否发送成功，上行 */
};

/* TCONNAPI_AUTH*/
enum tagTCONNAPI_AUTH 
{
    TCONNAPI_AUTH_NONE = 0, 
    TCONNAPI_AUTH_QQV1 = 1, 
    TCONNAPI_AUTH_QQV2 = 2, 
    TCONNAPI_AUTH_QQUNIFIED = 3, 
};
#define TFRAMEHEAD_MAX_BATCH_IDENT                       	512 	/* 最大组播个数 */
#define TFRAMEHEAD_EXTRA_IP                              	1
#define TFRAMEHEAD_TIMESTAMP_TIMEVAL                     	1
#define SERLIZER_NAME_LEN                                	32
#define NETTRANS_NAME_LEN                                	32
#define TFRAMEHEAD_SET_ROUTING                           	1
#define MAX_BROADCAST_ALL_MSG_LEN                        	10240 	/* 一个广播消息包的最大大小 */
#define MAX_BROADCAST_ALL_MSG_NUM                        	100 	/* 广播消息包缓冲区能容纳的广播消息包的最大个数 */
#define MAX_CLIENT_NUM_ONCE_SEND                         	100 	/* 一次给多少个客户端发送广播包 */

/* TFRAMEHEAD_STOP_REASON*/
enum tagTFRAMEHEAD_STOP_REASON 
{
    TFRAMEHEAD_REASON_NONE = 0, 	/* success */
    TFRAMEHEAD_REASON_IDLE_CLOSE = 1, 	/* 连接空闲关闭 */
    TFRAMEHEAD_REASON_PEER_CLOSE = 2, 	/* 客户端关闭 */
    TFRAMEHEAD_REASON_NETWORK_FAIL = 3, 	/* 网络异常关闭 */
    TFRAMEHEAD_REASON_BAD_PKGLEN = 4, 	/* 请求包长度异常关闭 */
    TFRAMEHEAD_REASON_EXCEED_LIMIT = 5, 	/* 客户端发送速度超过限制 */
    TFRAMEHEAD_REASON_TCONND_SHUTDOWN = 6, 	/* tconnd重启 */
    TFRAMEHEAD_REASON_SELF_CLOSE = 7, 	/* 服务器主动下发关闭 */
    TFRAMEHEAD_REASON_AUTH_FAIL = 8, 	/* 客户端连接验证失败 */
    TFRAMEHEAD_REASON_SYNACK_FAIL = 9, 	/* 客户端三次握手验证失败 */
    TFRAMEHEAD_REASON_WR_BLOCKED = 10, 	/* socket发送缓冲区写满 */
    TFRAMEHEAD_REASON_SEQUENCE_INVALID = 11, 	/* 上行包序列号非法 */
    TFRAMEHEAD_REASON_TRANS_RELAY = 12, 	/* 预占由于重连释放 */
    TFRAMEHEAD_REASON_TRANS_LOST = 13, 	/* 连接已经释放 */
    TFRAMEHEAD_REASON_RELAY_FAIL = 14, 	/* 客户端重连验证失败 */
    TFRAMEHEAD_REASON_MBA_FAIL = 15, 	/* 密保处理失败 */
    TFRAMEHEAD_REASON_MBA_TIMEOUT = 16, 	/* 密保返回应答超时 */
    TFRAMEHEAD_REASON_UNPACK_FAIL = 17, 	/* tconnd 客户端协议解码失败 */
    TFRAMEHEAD_REASON_INVALID_PKG = 18, 	/* 数据包非法 */
    TFRAMEHEAD_REASON_INVALID_SKEY = 19, 	/* SKEY失效，用户非登录状态。 */
    TFRAMEHEAD_REASON_VERIFY_DUP = 20, 	/* 其他连接已在校验，当前连接暂时不能校验。 */
    TFRAMEHEAD_REASON_COUNT = 21, 	/* 加错误码后记得改tconnapi.c和tconnapi.cpp里的tconnd_close_string[] */
};

/* TFRAMEHEAD_SETROUTING_RESULT*/
enum tagTFRAMEHEAD_SETROUTING_RESULT 
{
    SETROUTING_RESULT_SUCCESS = 0, 
    SETROUTING_RESULT_FAIL_SERLIZER_UNKNOWN = 2, 
};

/* TFRAMEHEAD_SETCONNLIMIT_RESULT*/
enum tagTFRAMEHEAD_SETCONNLIMIT_RESULT 
{
    SETCONNLIMIT_RESULT_SUCCESS = 0, 
    SETCONNLIMIT_RESULT_FAIL_INVALID_DATA = 1, 
};

/* TFRAMEHEAD_RELAYTYPE*/
enum tagTFRAMEHEAD_RELAYTYPE 
{
    TFRAMEHEAD_JUMP_SERVER_RELAY = 1, 	/* 跨服重连 */
    TFRAMEHEAD_NETWORK_FAILURE_RELAY = 2, 	/* 断线重连 */
    TFRAMEHEAD_CLIENT_CRASH_RELAY = 3, 	/* 预留 */
};
#define TFRAMEHEAD_CONNECTKEY_LEN                        	16
#define TFRAMEHEAD_IDENTITY_LEN                          	16
#define TFRAMEHEAD_MAX_SIG_LEN                           	128
#define TFRAMEHEAD_MAX_ROUTING_ARGS_LEN                  	128

/* TFRAMEHEAD_FLAG*/
enum tagTFRAMEHEAD_FLAG 
{
    TFRAMEHEAD_FLAG_RELIABLE = 1, 	/* 表示下行包是否可靠,仅对可靠UDP方式有效 */
};

/* TFRAMEHEAD_CMD_BROADCAST_ALL_RESULT*/
enum tagTFRAMEHEAD_CMD_BROADCAST_ALL_RESULT 
{
    BROADCAST_ALL_RESULT_SUCCESS = 0, 	/* 接收广播包成功 */
    BROADCAST_ALL_RESULT_FAIL_MSG_BIGGER = 1, 	/* 广播包大小过大 */
    BROADCAST_ALL_RESULT_FAIL_NO_BUFF = 2, 	/* 广播包缓冲区已满 */
};
#define TWEB_SKEY_LEN                                    	11 	/* SKEY长度，10+1，留了一个'\0'的位置。 */
#define TWEB_ACCOUNT_LEN                                 	31 	/* 帐户名称，留了'\0'的位置。 */
#define TWEB_TOKEN_LEN                                   	201 	/* Token长度，留了一个'\0'的位置。 */
#define TWEB_PASSPORT_LEN                                	20 	/* 增值位，20byte */

/* TWEB_USERINFO_TYPE*/
enum tagTWEB_USERINFO_TYPE 
{
    TWEB_USER_UNKNOWN = 0, 	/* 未知状态，用于初始默认值 */
    TWEB_USER_QQSIMPLE = 1, 
    TWEB_USER_COMMON = 2, 
};
#define TCONND_WAP_MAX_KEY_LEN                           	30
#define TCONND_WAP_MAX_VALUE_LEN                         	200
#define TCONND_WAP_MAX_URI_LEN                           	1024
#define TCONND_WAP_MAX_BODY_LEN                          	102400
#define TCONND_WAP_MAX_PARAMS_COU                        	20
#define TCONND_WAP_MAX_HEADERS_COU                       	20
#define TCONND_WAP_MAX_COOKIES_COU                       	20


/*   Structs/unions prototype.   */
struct tagQQUserSimp;
typedef struct tagQQUserSimp                                       	QQUSERSIMP;
typedef struct tagQQUserSimp                                       	*LPQQUSERSIMP;

struct tagCommUser;
typedef struct tagCommUser                                         	COMMUSER;
typedef struct tagCommUser                                         	*LPCOMMUSER;

union tagWebUserInfo;
typedef union  tagWebUserInfo                                      	WEBUSERINFO;
typedef union  tagWebUserInfo                                      	*LPWEBUSERINFO;

struct tagTKeyValue2;
typedef struct tagTKeyValue2                                       	TKEYVALUE2;
typedef struct tagTKeyValue2                                       	*LPTKEYVALUE2;

struct tagTParams2;
typedef struct tagTParams2                                         	TPARAMS2;
typedef struct tagTParams2                                         	*LPTPARAMS2;

struct tagTHeaders2;
typedef struct tagTHeaders2                                        	THEADERS2;
typedef struct tagTHeaders2                                        	*LPTHEADERS2;

struct tagTCookies2;
typedef struct tagTCookies2                                        	TCOOKIES2;
typedef struct tagTCookies2                                        	*LPTCOOKIES2;

struct tagTWapUpload2;
typedef struct tagTWapUpload2                                      	TWAPUPLOAD2;
typedef struct tagTWapUpload2                                      	*LPTWAPUPLOAD2;

struct tagTWapDownload2;
typedef struct tagTWapDownload2                                    	TWAPDOWNLOAD2;
typedef struct tagTWapDownload2                                    	*LPTWAPDOWNLOAD2;

struct tagTIPInfo;
typedef struct tagTIPInfo                                          	TIPINFO;
typedef struct tagTIPInfo                                          	*LPTIPINFO;

union tagTFrameHeadData;
typedef union  tagTFrameHeadData                                   	TFRAMEHEADDATA;
typedef union  tagTFrameHeadData                                   	*LPTFRAMEHEADDATA;

struct tagTFrameAuthQQ;
typedef struct tagTFrameAuthQQ                                     	TFRAMEAUTHQQ;
typedef struct tagTFrameAuthQQ                                     	*LPTFRAMEAUTHQQ;

union tagTFrameAuthData;
typedef union  tagTFrameAuthData                                   	TFRAMEAUTHDATA;
typedef union  tagTFrameAuthData                                   	*LPTFRAMEAUTHDATA;

struct tagTFrameCmdStart;
typedef struct tagTFrameCmdStart                                   	TFRAMECMDSTART;
typedef struct tagTFrameCmdStart                                   	*LPTFRAMECMDSTART;

struct tagTFrameCmdStop;
typedef struct tagTFrameCmdStop                                    	TFRAMECMDSTOP;
typedef struct tagTFrameCmdStop                                    	*LPTFRAMECMDSTOP;

struct tagTFrameIdent;
typedef struct tagTFrameIdent                                      	TFRAMEIDENT;
typedef struct tagTFrameIdent                                      	*LPTFRAMEIDENT;

struct tagTFrameCmdInProc;
typedef struct tagTFrameCmdInProc                                  	TFRAMECMDINPROC;
typedef struct tagTFrameCmdInProc                                  	*LPTFRAMECMDINPROC;

struct tagTFrameCmdRelay;
typedef struct tagTFrameCmdRelay                                   	TFRAMECMDRELAY;
typedef struct tagTFrameCmdRelay                                   	*LPTFRAMECMDRELAY;

struct tagTFrameCmdSetRouting;
typedef struct tagTFrameCmdSetRouting                              	TFRAMECMDSETROUTING;
typedef struct tagTFrameCmdSetRouting                              	*LPTFRAMECMDSETROUTING;

struct tagTFrameCmdSetRoutingRsp;
typedef struct tagTFrameCmdSetRoutingRsp                           	TFRAMECMDSETROUTINGRSP;
typedef struct tagTFrameCmdSetRoutingRsp                           	*LPTFRAMECMDSETROUTINGRSP;

union tagTRoutingOption;
typedef union  tagTRoutingOption                                   	TROUTINGOPTION;
typedef union  tagTRoutingOption                                   	*LPTROUTINGOPTION;

struct tagTFrameCmdNotify;
typedef struct tagTFrameCmdNotify                                  	TFRAMECMDNOTIFY;
typedef struct tagTFrameCmdNotify                                  	*LPTFRAMECMDNOTIFY;

struct tagTFrameCmdSetConnLimit;
typedef struct tagTFrameCmdSetConnLimit                            	TFRAMECMDSETCONNLIMIT;
typedef struct tagTFrameCmdSetConnLimit                            	*LPTFRAMECMDSETCONNLIMIT;

struct tagTFrameCmdSetConnLimitRsp;
typedef struct tagTFrameCmdSetConnLimitRsp                         	TFRAMECMDSETCONNLIMITRSP;
typedef struct tagTFrameCmdSetConnLimitRsp                         	*LPTFRAMECMDSETCONNLIMITRSP;

struct tagTFrameCmdExgVer;
typedef struct tagTFrameCmdExgVer                                  	TFRAMECMDEXGVER;
typedef struct tagTFrameCmdExgVer                                  	*LPTFRAMECMDEXGVER;

struct tagTFrameCmdWaitNumRsp;
typedef struct tagTFrameCmdWaitNumRsp                              	TFRAMECMDWAITNUMRSP;
typedef struct tagTFrameCmdWaitNumRsp                              	*LPTFRAMECMDWAITNUMRSP;

struct tagTFrameCmdRoutingRegister;
typedef struct tagTFrameCmdRoutingRegister                         	TFRAMECMDROUTINGREGISTER;
typedef struct tagTFrameCmdRoutingRegister                         	*LPTFRAMECMDROUTINGREGISTER;

struct tagTFrameCmdWebCommReq;
typedef struct tagTFrameCmdWebCommReq                              	TFRAMECMDWEBCOMMREQ;
typedef struct tagTFrameCmdWebCommReq                              	*LPTFRAMECMDWEBCOMMREQ;

struct tagTFrameCmdWebStartReq;
typedef struct tagTFrameCmdWebStartReq                             	TFRAMECMDWEBSTARTREQ;
typedef struct tagTFrameCmdWebStartReq                             	*LPTFRAMECMDWEBSTARTREQ;

struct tagTFrameCmdWebStopReq;
typedef struct tagTFrameCmdWebStopReq                              	TFRAMECMDWEBSTOPREQ;
typedef struct tagTFrameCmdWebStopReq                              	*LPTFRAMECMDWEBSTOPREQ;

struct tagTFrameCmdWebBoardcast;
typedef struct tagTFrameCmdWebBoardcast                            	TFRAMECMDWEBBOARDCAST;
typedef struct tagTFrameCmdWebBoardcast                            	*LPTFRAMECMDWEBBOARDCAST;

struct tagTFrameCmdWebBroadcastAll;
typedef struct tagTFrameCmdWebBroadcastAll                         	TFRAMECMDWEBBROADCASTALL;
typedef struct tagTFrameCmdWebBroadcastAll                         	*LPTFRAMECMDWEBBROADCASTALL;

struct tagTFrameCmdWebBroadcastAllRsp;
typedef struct tagTFrameCmdWebBroadcastAllRsp                      	TFRAMECMDWEBBROADCASTALLRSP;
typedef struct tagTFrameCmdWebBroadcastAllRsp                      	*LPTFRAMECMDWEBBROADCASTALLRSP;

union tagTFrameCmdData;
typedef union  tagTFrameCmdData                                    	TFRAMECMDDATA;
typedef union  tagTFrameCmdData                                    	*LPTFRAMECMDDATA;

struct tagTTimeVal;
typedef struct tagTTimeVal                                         	TTIMEVAL;
typedef struct tagTTimeVal                                         	*LPTTIMEVAL;

union tagTTimeStampData;
typedef union  tagTTimeStampData                                   	TTIMESTAMPDATA;
typedef union  tagTTimeStampData                                   	*LPTTIMESTAMPDATA;

struct tagTFrameHead;
typedef struct tagTFrameHead                                       	TFRAMEHEAD;
typedef struct tagTFrameHead                                       	*LPTFRAMEHEAD;

/*   Define structs/unions.   */
#pragma pack(1)

/* QQ用户的识别信息，简单版 */
struct tagQQUserSimp
{
    uint32_t dwUin;                                   	/*   QQ号 */
    char szSKey[TWEB_SKEY_LEN];                       	/*   ptlogin session key */
};

/* 通用的用户的识别信息 */
struct tagCommUser
{
    uint32_t dwId;                                    	/*   用户身份ID，通常用于系统对接 */
    char szAccount[TWEB_ACCOUNT_LEN];                 	/*   用户帐户，用于登录 */
    char szToken[TWEB_TOKEN_LEN];                     	/*   用户凭据，主要用于验证用户登录状态和身份 */
};

union tagWebUserInfo
{
    QQUSERSIMP stQQUserSimple;                        	/* TWEB_USER_QQSIMPLE,   */
    COMMUSER stCommonUser;                            	/* TWEB_USER_COMMON,   */
};

/* Key-Value对 */
struct tagTKeyValue2
{
    char szKey[TCONND_WAP_MAX_KEY_LEN];              
    char szValue[TCONND_WAP_MAX_VALUE_LEN];          
};

/* URI参数 */
struct tagTParams2
{
    uint8_t bCount;                                   	/*   个数 */
    TKEYVALUE2 astParams[TCONND_WAP_MAX_PARAMS_COU]; 
};

/* Header */
struct tagTHeaders2
{
    uint8_t bCount;                                   	/*   个数 */
    TKEYVALUE2 astHeaders[TCONND_WAP_MAX_HEADERS_COU];
};

/* Cookies */
struct tagTCookies2
{
    uint8_t bCount;                                   	/*   个数 */
    TKEYVALUE2 astCookies[TCONND_WAP_MAX_COOKIES_COU];
};

/* WAP通信上行包 */
struct tagTWapUpload2
{
    int8_t chUserType;                                	/*    Bind Macrosgroup:TWEB_USERINFO_TYPE,*/
    WEBUSERINFO stUser;                              
    char szURI[TCONND_WAP_MAX_URI_LEN];              
    TPARAMS2 stParams;                                	/*   Params */
    THEADERS2 stHeaders;                              	/*   Headers */
    TCOOKIES2 stCookies;                              	/*   Cookies */
};

/* WAP通信下行包 */
struct tagTWapDownload2
{
    THEADERS2 stHeaders;                              	/*   Headers */
    char szBody[TCONND_WAP_MAX_BODY_LEN];             	/*   Body */
};

struct tagTIPInfo
{
    int16_t nFamily;                                 
    uint16_t wPort;                                  
    tdr_ip_t ulIp;                                   
};

union tagTFrameHeadData
{
    TIPINFO stIPInfo;                                 	/* TFRAMEHEAD_EXTRA_IP,   */
};

struct tagTFrameAuthQQ
{
    uint32_t dwUin;                                  
    int16_t nSigVer;                                  	/*  Ver.12 签名格式版本 */
    uint32_t dwSigTime;                               	/*  Ver.12 签名时间 */
    int16_t nSigLen;                                  	/*  Ver.12 签名长度 */
    uint8_t szSigBuff[TFRAMEHEAD_MAX_SIG_LEN];        	/*  Ver.12 签名内容,详细格式参考即通签名说明文档 */
};

union tagTFrameAuthData
{
    TFRAMEAUTHQQ stAuthQQV1;                          	/* TCONNAPI_AUTH_QQV1,   */
    TFRAMEAUTHQQ stAuthQQV2;                          	/* TCONNAPI_AUTH_QQV2,   */
    TFRAMEAUTHQQ stAuthQQUnified;                     	/* TCONNAPI_AUTH_QQUNIFIED,   */
};

/* 连接建立包 */
struct tagTFrameCmdStart
{
    int32_t iAuthType;                                	/*    Bind Macrosgroup:TCONNAPI_AUTH,*/
    TFRAMEAUTHDATA stAuthData;                       
    int32_t iWaitTime;                                	/*   连接排队时间 */
};

/* 连接断开包 */
struct tagTFrameCmdStop
{
    int32_t iReason;                                 
};

/* 连接标识 */
struct tagTFrameIdent
{
    int32_t iID;                                     
    int32_t iConnIdx;                                
};

struct tagTFrameCmdInProc
{
    int8_t chValid;                                   	/*   是否组播,0:单播 1:组播 */
    int8_t chNoEnc;                                   	/*   下行包是否加密 */
    int16_t nCount;                                   	/*   组播个数 */
    TFRAMEIDENT astIdents[TFRAMEHEAD_MAX_BATCH_IDENT];
};

struct tagTFrameCmdRelay
{
    uint32_t dwUin;                                  
    int32_t iRelayType;                               	/*    Bind Macrosgroup:TFRAMEHEAD_RELAYTYPE,*/
    TFRAMEIDENT stOld;                               
    TFRAMEIDENT stNew;                               
};

struct tagTFrameCmdSetRouting
{
    char szSerializerName[SERLIZER_NAME_LEN];         	/*   bus标识名 */
    int32_t iID;                                      	/*   新的连接在逻辑服务端上的索引,含义同head字段 */
};

/* 跳转路由回应包 */
struct tagTFrameCmdSetRoutingRsp
{
    int32_t iResult;                                  	/*    Bind Macrosgroup:TFRAMEHEAD_SETROUTING_RESULT,*/
};

/* 跳转路由请求包 */
union tagTRoutingOption
{
    TFRAMECMDSETROUTING stCmdRouting;                 	/* TFRAMEHEAD_SET_ROUTING,   */
};

/* 占位请求包 */
struct tagTFrameCmdNotify
{
    uint32_t dwUin;                                  
    int8_t szConnKey[TFRAMEHEAD_CONNECTKEY_LEN];     
    int8_t szIdentity[TFRAMEHEAD_IDENTITY_LEN];      
    uint8_t bISetRouting;                             	/*   是否设置路由,默认为零暂时不用 */
    TROUTINGOPTION stRouting;                         	/*   路由选项 */
};

/* 设置连接限制 */
struct tagTFrameCmdSetConnLimit
{
    char szNetTransName[NETTRANS_NAME_LEN];           	/*   NetTrans名字可选,可以不填 */
    int32_t iPermit;                                  	/*   服务器能处理最大连接数 */
    int32_t iSpeed;                                   	/*   每一百毫秒放行连接数 */
};

/* 设置连接限制回应包 */
struct tagTFrameCmdSetConnLimitRsp
{
    int32_t iResult;                                  	/*    Bind Macrosgroup:TFRAMEHEAD_SETCONNLIMIT_RESULT,*/
};

/* 交互服务器协议版本 */
struct tagTFrameCmdExgVer
{
    int32_t iVersion;                                 	/*   服务器所使用的协议版本,需要取值宏TDR_METALIB_TFRAMEHEAD_VERSION */
};

/* 请求客户端等待连接数量的应答包 */
struct tagTFrameCmdWaitNumRsp
{
    int32_t iWaitNum;                                
};

/* 服务器注册业务路由参数 */
struct tagTFrameCmdRoutingRegister
{
    int32_t iArgsLen;                                 	/*   应用自定义路由参数的长度 */
    int8_t szRoutingArgs[TFRAMEHEAD_MAX_ROUTING_ARGS_LEN]; 	/*   应用自定义路由参数 */
};

/* WEBGAME通用上行 */
struct tagTFrameCmdWebCommReq
{
    int8_t chUserType;                                	/*    Bind Macrosgroup:TWEB_USERINFO_TYPE,*/
    WEBUSERINFO stUser;                              
};

/* WEBGAME连接开始请求，上行 */
struct tagTFrameCmdWebStartReq
{
    int8_t chUserType;                                	/*    Bind Macrosgroup:TWEB_USERINFO_TYPE,*/
    WEBUSERINFO stUser;                              
    int32_t iWaitTime;                                	/*   连接排队时间,  */
};

/* WEBGAME连接中断，上行 */
struct tagTFrameCmdWebStopReq
{
    int8_t chUserType;                                	/*    Bind Macrosgroup:TWEB_USERINFO_TYPE,*/
    WEBUSERINFO stUser;                              
    int32_t iReason;                                  	/*   中断连接的原因 */
};

/* WEBGAME组播包，下行 */
struct tagTFrameCmdWebBoardcast
{
    int8_t chValid;                                   	/*   是否组播,0:单播 1:组播 */
    int8_t chNoEnc;                                   	/*   下行包是否加密 */
    int16_t nCount;                                   	/*   组播个数 */
    TFRAMEIDENT astIdents[TFRAMEHEAD_MAX_BATCH_IDENT];
};

/* WEBGAME广播包，下行 */
struct tagTFrameCmdWebBroadcastAll
{
    int8_t chValid;                                   	/*   是否广播，0：单播 1：广播 */
    int8_t chNoEnc;                                   	/*   下行包是否加密 */
};

/* WEBGAME广播应答包，上行 */
struct tagTFrameCmdWebBroadcastAllRsp
{
    int8_t chFailed;                                  	/*   TCONND接收广播包是否成功，0：成功 非0：失败 */
};

union tagTFrameCmdData
{
    TFRAMECMDSTART stStart;                           	/* TFRAMEHEAD_CMD_START,  登录请求及应答,双向 */
    TFRAMECMDSTOP stStop;                             	/* TFRAMEHEAD_CMD_STOP,  断开连接,双向 */
    TFRAMECMDINPROC stInProc;                         	/* TFRAMEHEAD_CMD_INPROC,  通信包,双向 */
    TFRAMECMDRELAY stRelay;                           	/* TFRAMEHEAD_CMD_RELAY,  重连请求及应答,双向 */
    TFRAMECMDNOTIFY stNotify;                         	/* TFRAMEHEAD_CMD_NOTIFY,  占位,双向 */
    TFRAMECMDSETROUTING stSetRouting;                 	/* TFRAMEHEAD_CMD_SETROUTING,  跳转路由,单向:SVR->TCONND */
    TFRAMECMDSETROUTINGRSP stSetRoutingRsp;           	/* TFRAMEHEAD_CMD_RSP_SETROUTING,  跳转路由应答,单向:TCONND->SVR */
    TFRAMECMDSETCONNLIMIT stSetConnLimit;             	/* TFRAMEHEAD_CMD_SETCONNLIMIT,  设置连接排队信息,单向:SVR->TCONND */
    TFRAMECMDSETCONNLIMITRSP stSetConnLimitRsp;       	/* TFRAMEHEAD_CMD_RSP_SETCONNLIMIT,  设置连接排队信息应答,单向:TCONND->SVR */
    TFRAMECMDEXGVER stExgVer;                         	/* TFRAMEHEAD_CMD_EXGVER, Ver.12 交互协议版本:双向 */
    TFRAMECMDWAITNUMRSP stWaitNumRsp;                 	/* TFRAMEHEAD_CMD_WAITNUM_RSP, Ver.13 请求客户端等待连接数量的应答 */
    TFRAMECMDWEBSTARTREQ stWebStartReq;               	/* TFRAMEHEAD_CMD_WEBSTART,  WEBGAME登录请求，双向 */
    TFRAMECMDWEBCOMMREQ stWebCommReq;                 	/* TFRAMEHEAD_CMD_WEBINPROC,  WEBGAME正常通信请求，上行 */
    TFRAMECMDWEBSTOPREQ stWebStopReq;                 	/* TFRAMEHEAD_CMD_WEBSTOP,  WEBGAME断开连接，上行 */
    TFRAMECMDROUTINGREGISTER stRoutingRegister;       	/* TFRAMEHEAD_CMD_REGISTER_ROUTING, Ver.15 服务器注册业务路由 */
    TFRAMECMDWEBBOARDCAST stWebBoardcast;             	/* TFRAMEHEAD_CMD_WEB_BOARDCAST,  WEBGAME组播，下行 */
    TFRAMECMDWEBBROADCASTALL stWebBroadcastAll;       	/* TFRAMEHEAD_CMD_WEB_BROADCAST_ALL, Ver.15 WEBGAME广播，下行 */
    TFRAMECMDWEBBROADCASTALLRSP stWebBroadcastAllRsp; 	/* TFRAMEHEAD_CMD_WEB_BROADCAST_ALL_RSP, Ver.15 WEBGAME广播应答包，上行 */
};

struct tagTTimeVal
{
    int32_t iSec;                                    
    int32_t iUsec;                                   
};

union tagTTimeStampData
{
    TTIMEVAL stTimeVal;                               	/* TFRAMEHEAD_TIMESTAMP_TIMEVAL,   */
};

struct tagTFrameHead
{
    int8_t chVer;                                     	/*   协议版本信息,取值参考宏TDR_METALIB_TFRAMEHEAD_VERSION,一般要求服务器与TCONND需要先交互协议版本 */
    int8_t chCmd;                                     	/*   协议类型 Bind Macrosgroup:TFRAMEHEAD_CMD_ID,*/
    int8_t chExtraType;                               	/*   是否带连接IP信息,发送给逻辑服务器的第一个包会带上,对于长连接之后不再带 IP信息,只带会话 ID */
    int8_t chTimeStampType;                           	/*   是否带时间戳,由tconnd配置 */
    int8_t chFlag;                                    	/*  Ver.14 bit0表示下行包是否可靠,仅对可靠UDP方式有效,其它bit位保留 */
    int32_t iID;                                      	/*   会话ID,对于长连接由逻辑服务器在start或者relay回包中设置,对于短连接不用设置,对于组播包忽略该字段 */
    int32_t iConnIdx;                                 	/*   连接标识,对逻辑服务器只读不能修改,对于组播包忽略该字段 */
    TFRAMEHEADDATA stExtraInfo;                       	/*   连接 IP信息 */
    TTIMESTAMPDATA stTimeStamp;                       	/*   时间戳信息 */
    TFRAMECMDDATA stCmdData;                          	/*   协议数据 */
};

#pragma pack()


#endif /* TFRAMEHEAD_H */
