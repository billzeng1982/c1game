--[[
名称：伏兵
类型：固有被动
描述：开场隐身，对第一个碰到的敌人造成大量伤害
--]]
local ThisScriptId = 5001;
local RefreshTime = 8;	--8秒进入伏兵

local function Reset(LuaDataAgt, isEffect)
	-- isEffect 表示是否伏兵生效时重置
	
	-- 停止开始进入伏兵特效
	LuaDataAgt:StopFx("Prefabs/BasicEffect/AmbushFX_01");
	
	-- 播放伏兵消失特效
	if not LuaDataAgt:HasBuff(ThisScriptId) then
		-- 进入伏兵阶段
		local Timer = RefreshTime - tostring(math.ceil(LuaDataAgt:GetShareTimer(0)));
		if Timer > 8 then
			Timer = 8;
		end
		if Timer > 0 then
			local FXpath = "Prefabs/BasicEffect/AmbushFX_XS_0"..Timer.."s";
			local TarPos = LuaDataAgt:GetCurPos();
			LuaDataAgt:PlayFX(FXpath, nil, TarPos, TarPos, 0, false); -- 延迟0播该特效
		end
	else
		-- 已是伏兵阶段
		if not isEffect then
			-- 不是正常伏兵生效，需要播驱散特效
			local FXpath = "Prefabs/BasicEffect/AmbushFX_XS_08s";
			local TarPos = LuaDataAgt:GetCurPos();
			LuaDataAgt:PlayFX(FXpath, nil, TarPos, TarPos, 0, false); -- 延迟0播该特效
		end
	end
	
	-- 重置进入伏兵阶段Timer
	LuaDataAgt:SetShareTimer(0, RefreshTime);
	
	-- 重置进入伏兵特效Timer
	LuaDataAgt:SetShareTimer(1, 1);
end

--技能诞生处理
local function runBorn(LuaDataAgt)
	if not IsOnServer then
		LuaDataAgt:SetShareTimer(0, -1);	--进入伏兵阶段Timer
		LuaDataAgt:SetShareTimer(1, 999);
		
	end

	--伏兵监听事件
	LuaDataAgt:SetFilter(FILTER_TYPE.HP, TARGET_GROUP.NONE, 0);
	LuaDataAgt:SetFilter(FILTER_TYPE.COND, TARGET_GROUP.NONE, 0);
	LuaDataAgt:SetFilter(FILTER_TYPE.TRIG, TARGET_GROUP.NONE, 0);

end

--技能条件判断
local function checkCond(LuaDataAgt)
	return true;
end

--找对象，上面条件满足后执行
local function findTarget(LuaDataAgt)
	--找之前先清一次
	LuaDataAgt:ClearTarget();
end

--特效结束的回调
local function effectOverCallBack(LuaDataAgt)
	LuaDataAgt:AddBuff(ThisScriptId, LuaDataAgt, nil);
	--加上buff后，把sharetimer改到999
	LuaDataAgt:SetShareTimer(0, 999);
end

--技能生效，数值处理
local function takeEffect(LuaDataAgt)
	if IsOnServer then
		LuaDataAgt:SetSkillEnable(false);
		return;
	end
	
	--场上只有自己的时候，伏兵去使能
	if LuaDataAgt:IsOnFieldOnlyMe() then
		if LuaDataAgt:HasBuff(ThisScriptId) then
			-- 是否设置过Timer2
			local isSetTimer2 = LuaDataAgt:GetShareValue(0);
			if isSetTimer2 == 0 then
				LuaDataAgt:SetShareTimer(2, 3);
				
				LuaDataAgt:SetShareValue(0, 1);
			end
			
			local delBuffTimer = LuaDataAgt:GetShareTimer(2);
			if delBuffTimer <= 0 then
				LuaDataAgt:DelBuff(ThisScriptId, BUFF_TYPE.BUFF_TYPE_NONE, LuaDataAgt);
				-- 重置
				Reset(LuaDataAgt, false);
				
				-- 是否设置过Timer2重置
				LuaDataAgt:SetShareValue(0, 0);
			end
		else
			-- 重置进入伏兵阶段Timer
			LuaDataAgt:SetShareTimer(0, RefreshTime - 1);
			
			-- 重置进入伏兵特效Timer
			LuaDataAgt:SetShareTimer(1, 0);
		end
		
		return;
	end
	
	-- 是否设置过Timer2重置
	LuaDataAgt:SetShareValue(0, 0);
	
	--进入伏兵阶段Timer
	local ambushTimer = LuaDataAgt:GetShareTimer(0);
	if ambushTimer <= -1 then
		if not LuaDataAgt:HasBuff(ThisScriptId) then
			LuaDataAgt:AddBuff(ThisScriptId, LuaDataAgt, nil);
			
		end
		
		LuaDataAgt:SetShareTimer(0, 999);
		LuaDataAgt:SetShareTimer(1, 999);
	end
	
	--进入伏兵特效Timer
	local beginAmbushFxTimer = LuaDataAgt:GetShareTimer(1);
	if beginAmbushFxTimer <= 0 then
		if LuaDataAgt:CanBeOperate() then
			--如果在场上，播放开始进入伏兵特效
			LuaDataAgt:PlayStopableFX("Prefabs/BasicEffect/AmbushFX_01", 0, nil);
			--LuaDataAgt:PlayStopableFX("Prefabs/BasicEffect/AmbushFX_01", 0, "PassiveSkill_5001.func_effectOverCallBack");
			LuaDataAgt:SetShareTimer(1, 999);
		end
	end
end

--过滤处理
local function doFilter(LuaDataAgt, iFilterType, rFilterOwner, FilterValue)
	-- Filter所有者是否是发起对象
	local rSource = FilterValue:GetSource();
	local IsSource = rFilterOwner:Equal(rSource);
	local armyPhase = LuaDataAgt:GetArmyPhase();
	
	if iFilterType == FILTER_TYPE.HP then
		-- 伤害导致伏兵重置
		if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_AMBUSH then
			-- 伏兵生效重置
			Reset(LuaDataAgt, true);
		elseif FilterValue.m_fFoo1 < 0 and  not IsSource then
			Reset(LuaDataAgt, false);
		end
	end

	if iFilterType == FILTER_TYPE.TRIG then
		-- 放技能重置时间
		if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_TRIG_GENERALSKILL then
			Reset(LuaDataAgt, false);
		end
	end

	return FilterValue;
end

PassiveSkill_5001 = {
	func_runBorn = runBorn;
	func_checkCond = checkCond;
	func_findTarget = findTarget;
	func_takeEffect = takeEffect;

	func_doFilter = doFilter;
	func_effectOverCallBack = effectOverCallBack;
}
