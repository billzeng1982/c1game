--[[
名称：霸王雷破
类型：主动技能
描述：孙策以破军之势重创前方敌军，禁锢敌军。
--]]
local ThisScriptId = 21;

--Buff诞生处理
local function runBorn(LuaDataAgt)
	local rSource = LuaDataAgt:GetBuffSource();

	--buff时间设置
	local iTime = rSource:GetActiveSkillAdditionValue(2);
	LuaDataAgt:SetBuffLifeTime(VALUE_TYPE.RUNTIME_CONF, iTime);

	--设置BUFF速度
	--local iSpeed = rSource:GetActiveSkillAdditionValue(2);
	--LuaDataAgt:ChgSpeedByRatio( 1 - iSpeed / 100);

	--检测HP，易伤
	--LuaDataAgt:SetFilter(FILTER_TYPE.HP, TARGET_GROUP.NONE, 0);
	LuaDataAgt:SetFilter(FILTER_TYPE.POS, TARGET_GROUP.NONE, -2);
	if not IsOnServer then
		LuaDataAgt:RefreshFightNum();
	end
end

--Buff驱散条件判断
local function checkDeadCond(LuaDataAgt)

	return false;
end

--Buff驱散生效
local function runDead(LuaDataAgt)
	--local rSource = LuaDataAgt:GetBuffSource();

	--local iSpeed = rSource:GetActiveSkillAdditionValue(2);
	--LuaDataAgt:ChgSpeedByRatio( - 1 + iSpeed / 100);

	if not IsOnServer then
		LuaDataAgt:RefreshFightNum();
	end
end

--Buff生效条件判断
local function checkEffectCond(LuaDataAgt)
	return true;
end

--Buff生效
local function takeEffect(LuaDataAgt)

end

--Buff过滤处理
local function doFilter(LuaDataAgt, iFilterType, rFilterOwner, FilterValue)
	-- Filter所有者是否是发起对象
	local IsSource = rFilterOwner:Equal(FilterValue:GetSource());

--[[
	if iFilterType == FILTER_TYPE.HP then
		local iHp = FilterValue.m_fFoo1;
		if iHp < 0 and not IsSource then
			local rSource = LuaDataAgt:GetBuffSource();
			local iAddDMG = rSource:GetActiveSkillAdditionValue(3) / 100;	--易伤的程度
			iHp = iHp * (1 + iAddDMG);
		end
		FilterValue.m_fFoo1 = iHp;
	end
	--]]
	local IsSource = rFilterOwner:Equal(FilterValue:GetSource());

	if iFilterType == FILTER_TYPE.POS then
		-- 限制移动，不限制转向(临时）
		local limitPos = LuaDataAgt:GetCurPos();
		local destPos = Vector3(FilterValue.m_fFoo1, FilterValue.m_fFoo2, FilterValue.m_fFoo3);

		--print("limitPos--"..limitPos.x.."--"..limitPos.y.."--"..limitPos.z);
		--print("destPos--"..destPos.x.."--"..destPos.y.."--"..destPos.z);

		local newPos = limitPos +  Vector3.Normalize(destPos - limitPos) * 0.001;
		FilterValue.m_fFoo1 = newPos.x;
		FilterValue.m_fFoo2 = newPos.y;
		FilterValue.m_fFoo3 = newPos.z;

		--print("oRet.m_fFoo1--"..oRet.m_fFoo1.."--oRet.m_fFoo2--"..oRet.m_fFoo2.."--oRet.m_fFoo3--"..oRet.m_fFoo3);
	end
	
	return FilterValue;
end

Buff_21 = {
	func_runBorn = runBorn;
	func_checkDeadCond = checkDeadCond;
	func_runDead = runDead;
	func_checkEffectCond = checkEffectCond;
	func_takeEffect = takeEffect;

	func_doFilter = doFilter;
}