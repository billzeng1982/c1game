--[[
名称：归心似箭
类型：武将技能BUFF
描述：减伤害
--]]
local ThisScriptId = 2530;

--技能诞生处理
local function runBorn(LuaDataAgt)
		-- 血量过滤
		LuaDataAgt:SetFilter(FILTER_TYPE.HP, TARGET_GROUP.NONE, -1);
		local source = LuaDataAgt:GetBuffSource();
		--取被动技参数
		--local PassiveSkillRatio = LuaDataAgt:GetPassiveSkillBaseValue(ThisScriptId,1);
		local PassiveSkillRatio = source:GetActiveSkillBaseValue(5);
						
		--加物攻值
		local StrAtkAdd = 0;
		--加法攻值
		local WitAtkAdd = 0;
		--加物防值
		local StrDefAdd = 0;
		--加法防值
		local WitDefAdd = 0;
		--加血量值
		local MaxHpAdd = 0;		
		
		--加物攻比率
		local StrAtkRatio = 0;
		--加法攻比率
		local WitAtkRatio = 0;
		--加物防比率
		local StrDefRatio = 0;
		--加法防比率
		local WitDefRatio = 0;
		--加血量比率
		local MaxHpRatio = 0;			
		
		--加闪避概率
		local DodgeChance = 0;
		--加格挡概率
		local BlockChance = 0;
		--加命中概率
		local HitChance = 0;
		--加暴击概率
		local CriticalChance = 0;
		--加抗暴击概率
		local AntiCriticalChance = 0;
		--加暴击伤害
		local CriticalRatio = 0;
		--加抗暴击伤害
		local AntiCriticalRatio = 0;
		--加格挡系数
		local BlockRatio = 0;
		--加真实伤害
		local RealDmgPoint = 0;
		
		--buff时间设置
		--[[local witdef = LuaDataAgt:GetWitDef(VALUE_TYPE.CURRENT);
		local witatk = source:GetWitAtk(VALUE_TYPE.CURRENT);
		local itime = source:GetActiveSkillBaseValue(3);
		local itimeRatio = source:GetActiveSkillRateValue(3);
		itimeMax = itime * 1.2;
		itimeMin = itime * 0.8;
		itime = itime + (witatk - witdef) * itimeRatio;
		itime = math.max (itimeMin,math.min (itimeMax,itime) );

		LuaDataAgt:SetBuffLifeTime(VALUE_TYPE.RUNTIME_CONF, itime);]]--
		local itime = 10;
		LuaDataAgt:SetBuffLifeTime(VALUE_TYPE.RUNTIME_CONF, itime);
			
		--加四维和血量
		local FinalAddStrAtk = math.floor(LuaDataAgt:GetStrAtk(VALUE_TYPE.ORIGIN_CONF) * StrAtkRatio + StrAtkAdd);
		LuaDataAgt:ChgStrAtk(VALUE_TYPE.CURRENT,FinalAddStrAtk);
		local FinalAddWitAtk = math.floor(LuaDataAgt:GetWitAtk(VALUE_TYPE.ORIGIN_CONF) * WitAtkRatio + WitAtkAdd);	
		LuaDataAgt:ChgWitAtk(VALUE_TYPE.CURRENT,FinalAddWitAtk);	
		local FinalAddStrDef = math.floor(LuaDataAgt:GetStrDef(VALUE_TYPE.ORIGIN_CONF) * StrDefRatio + StrDefAdd);
		LuaDataAgt:ChgStrDef(VALUE_TYPE.CURRENT,FinalAddStrDef);
		local FinalAddWitDef = math.floor(LuaDataAgt:GetWitDef(VALUE_TYPE.ORIGIN_CONF) * WitDefRatio + WitDefAdd);	
		LuaDataAgt:ChgWitDef(VALUE_TYPE.CURRENT,FinalAddWitDef);
		local FinalAddMaxHp = math.floor(LuaDataAgt:GetHp(VALUE_TYPE.RUNTIME_CONF) * MaxHpRatio + MaxHpAdd);
		LuaDataAgt:ChgHp(VALUE_TYPE.RUNTIME_CONF,FinalAddMaxHp,LuaDataAgt,VALUE_CHG_TYPE.CHG_HP_COMM,ThisScriptId, 0);
		
		
		--加非概率部分
		LuaDataAgt:ChgAttribute(VALUE_TYPE.CURRENT, ATTR_TYPE.ATTR_CHANCE_DODGE,DodgeChance);
		LuaDataAgt:ChgAttribute(VALUE_TYPE.CURRENT, ATTR_TYPE.ATTR_CHANCE_BLOCK,BlockChance);
		LuaDataAgt:ChgAttribute(VALUE_TYPE.CURRENT, ATTR_TYPE.ATTR_CHANCE_HIT,HitChance);		
		LuaDataAgt:ChgAttribute(VALUE_TYPE.CURRENT, ATTR_TYPE.ATTR_CHANCE_CRITICAL,CriticalChance);			
		LuaDataAgt:ChgAttribute(VALUE_TYPE.CURRENT, ATTR_TYPE.ATTR_CHANCE_ANTICRITICAL,AntiCriticalChance);			
		--加非概率部分,暴击、真实伤害取攻击方,抗暴击、招架取受击方
		LuaDataAgt:ChgAttribute(VALUE_TYPE.CURRENT, ATTR_TYPE.ATTR_CHANCE_CRITICAL_VALUE,CriticalRatio);		
		LuaDataAgt:ChgAttribute(VALUE_TYPE.CURRENT, ATTR_TYPE.ATTR_CHANCE_ANTICRITICAL_VALUE,AntiCriticalRatio);		
		LuaDataAgt:ChgAttribute(VALUE_TYPE.CURRENT, ATTR_TYPE.ATTR_CHANCE_BLOCK_VALUE,BlockRatio);			
		LuaDataAgt:ChgAttribute(VALUE_TYPE.CURRENT, ATTR_TYPE.ATTR_DAMAGEADD,RealDmgPoint);		

end

--技能条件判断
local function checkCond(LuaDataAgt)
	return true;
end

--找对象,上面条件满足后执行
local function findTarget(LuaDataAgt)
	
end

--Buff生效条件判断
local function checkEffectCond(LuaDataAgt)
	return true;
end

--Buff驱散条件判断
local function checkDeadCond(LuaDataAgt)
	
	return false;
end

--Buff驱散生效
local function runDead(LuaDataAgt)
  
	if not IsOnServer then
		LuaDataAgt:RefreshFightNum();
	end
end


--技能生效,数值处理
local function takeEffect(LuaDataAgt)
	if IsOnServer then
		LuaDataAgt:SetSkillEnable(false);
		return;
	end
	
	--LuaDataAgt:ChgHp(VALUE_TYPE.CURRENT,1000000,LuaDataAgt,VALUE_CHG_TYPE.CHG_HP_COMM, 0);
	
	-- 复活时间改变
	local RevivalTime = 0;
	LuaDataAgt:ChgRevivalTime(VALUE_TYPE.RUNTIME_CONF, -RevivalTime);
	
	--加速度比率
	local   SpeedRatio = 0 + 1;
	LuaDataAgt:ChgSpeedByRatio(SpeedRatio);
	
	if not IsOnServer then
	    LuaDataAgt:RefreshFightNum();
	end
	
	-- 被动技能一场比赛只生效一次
	LuaDataAgt:SetSkillEnable(false);
end

--技能公式
local function doFormula(LuaDataAgt, iFormulaType, iFormulaPara, rSource, rTarget, iDamageRef)
	
end

--Skill过滤处理
local function doFilter(LuaDataAgt, iFilterType, rFilterOwner, FilterValue)
	-- Filter所有者是否是发起对象
	local source = LuaDataAgt:GetBuffSource();
	local IsSource = rFilterOwner:Equal(FilterValue:GetSource());
		--[[		LuaDataAgt:SetFormula(VALUE_CHG_TYPE.CHG_HP_ATK_CITYBACK, 0, 0);
		LuaDataAgt:SetFormula(VALUE_CHG_TYPE.CHG_HP_ATK_CITYGATEBACK, 0, 0);
		LuaDataAgt:SetFormula(VALUE_CHG_TYPE.CHG_HP_ATK_CITYGATE, 0, 0);
		LuaDataAgt:SetFormula(VALUE_CHG_TYPE.CHG_HP_ATK_CITYWALL, 0, 0);
		LuaDataAgt:SetFormula(VALUE_CHG_TYPE.CHG_HP_ATK_TOWER, 0, 0);
		LuaDataAgt:SetFormula(VALUE_CHG_TYPE.CHG_HP_ATK_BARRIER, 0, 0);
		LuaDataAgt:SetFormula(VALUE_CHG_TYPE.CHG_HP_ATK_NORMAL, 0, 0);
		LuaDataAgt:SetFormula(VALUE_CHG_TYPE.CHG_HP_ATK_SHOOT, 0, 0);
		LuaDataAgt:SetFormula(VALUE_CHG_TYPE.CHG_HP_ATK_SPEAR, 0, 0);
		LuaDataAgt:SetFormula(VALUE_CHG_TYPE.CHG_HP_ATK_RUSH, 0, 0);
		LuaDataAgt:SetFormula(VALUE_CHG_TYPE.CHG_HP_ATK_FACE, 0, 0);
		LuaDataAgt:SetFormula(VALUE_CHG_TYPE.CHG_HP_ATK_AMBUSH, 0, 0);
		VALUE_CHG_TYPE.CHG_HP_GENERALSKILL]]
		
	local PassiveSkillRatio = source:GetActiveSkillBaseValue(5);
	
	-- 定义输出伤害,正数为伤害增加
	local OutAll = -(PassiveSkillRatio / 100); --所有，不包含栅栏	
	local OutNormal = 0; --白兵
	local OutShoot = 0; --射击
	local OutSpear = 0; --枪击
	local OutRush = 0; --突击
	local OutFace = 0; --迎击
	local OutAmbush = 0; --伏兵
	local OutCity = 0; --攻城
	local OutCityBack = 0; --城墙反伤
	local OutBarrier = 0; --打栅栏,只能填整数
	local OutSkill = 0; --技能
	
	-- 定义受伤害,负数为减伤
	local InAll = 0; --所有，不包含栅栏		
	local InNormal = 0; --白兵
	local InShoot = 0; --射击
	local InSpear = 0; --枪击
	local InRush = 0; --突击
	local InFace = 0; --迎击
	local InAmbush = 0; --伏兵
	local InCity = 0; --攻城
	local InCityBack = 0; --城墙反伤
	local InBarrier = 0; --栅栏,只能填整数	
	local InSkill = 0; --技能
	
	--定义治疗相关
	local OutCure = 0; --输出治疗	
	local InCure = 0; --受治疗

	if iFilterType == FILTER_TYPE.HP then
		--输出伤害处理
		if IsSource and FilterValue.m_fFoo1 < 0 then
			--所有，不包含栅栏	
			if not (FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_TOWER or
					FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_BARRIER) then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + OutAll);
				local iHp_1 = FilterValue.m_fFoo1;
				print("iHp_1 = "..iHp_1);
			end		
			--白兵
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_NORMAL then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + OutNormal);
			end
			--射击
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_SHOOT then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + OutShoot);
			end
			--枪击
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_SPEAR then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + OutSpear);
			end
			--突击
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_RUSH then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + OutRush);
			end
			--迎击
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_FACE then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + OutFace);
			end
			--伏兵
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_AMBUSH then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + OutAmbush);
			end
			--攻城
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_CITYGATE or
				 FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_CITYWALL then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + OutCity);
			end
			--城墙反伤
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_CITYBACK or
				 FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_CITYGATEBACK then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + OutCityBack);
			end
			--打栅栏
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_TOWER or
				FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_BARRIER then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + OutBarrier);
			end
			--技能
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_GENERALSKILL then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + OutSkill);
			end

		end
		
		--受伤害处理
		if not IsSource and FilterValue.m_fFoo1 < 0 then
			--所有，不包含栅栏	
			if not (FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_TOWER or
					FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_BARRIER) then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + InAll);
			end		
			--白兵
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_NORMAL then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + InNormal);
			end
			--射击
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_SHOOT then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + InShoot);
			end
			--枪击
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_SPEAR then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + InSpear);
			end
			--突击
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_RUSH then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + InRush);
			end
			--迎击
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_FACE then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + InFace);
			end
			--伏兵
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_AMBUSH then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + InAmbush);
			end
			--攻城
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_CITYGATE or
				 FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_CITYWALL then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + InCity);
			end
			--城墙反伤
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_CITYBACK or
				 FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_CITYGATEBACK then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + InCityBack);
			end
			--打栅栏
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_TOWER or
				FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_ATK_BARRIER then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + InBarrier);
			end
			--技能
			if FilterValue.m_iValueChgType == VALUE_CHG_TYPE.CHG_HP_GENERALSKILL then
				local iHp = FilterValue.m_fFoo1;
				FilterValue.m_fFoo1 = iHp * (1 + InSkill);
			end

		end
		--输出治疗处理
		if IsSource and FilterValue.m_fFoo1 > 0 then
			local iHp = FilterValue.m_fFoo1;
			FilterValue.m_fFoo1 = iHp * (1 + OutCure);
		end
		--受治疗处理(不包含自己是治疗施法者的情况)
		if not IsSource and FilterValue.m_fFoo1 > 0 then
			local iHp = FilterValue.m_fFoo1;
			FilterValue.m_fFoo1 = iHp * (1 + InCure);
		end
		
	end
	return FilterValue;
end

--这个ID要和脚本ID保持一致
Buff_2530 = {
	func_runBorn = runBorn;
	func_checkCond = checkCond;
	func_findTarget = findTarget;
	func_takeEffect = takeEffect;
	func_checkDeadCond = checkDeadCond;
	func_runDead = runDead;
	func_checkEffectCond = checkEffectCond;	
	func_doFormula = doFormula;
	func_doFilter = doFilter;
}