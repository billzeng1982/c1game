--[[
名称：铁索连环
类型：武将技能Buff
描述：捆住敌人，不能移动，同时扣血
--]]
local ThisScriptId = 10123;


--Buff诞生处理
local function runBorn(LuaDataAgt)
	local source = LuaDataAgt:GetBuffSource();
	
	--buff时间设置
	local itime = source:GetActiveSkillAdditionValue(1);
	LuaDataAgt:SetBuffLifeTime(VALUE_TYPE.RUNTIME_CONF, itime);
	
	--设置过滤器
	LuaDataAgt:SetFilter(FILTER_TYPE.POS, TARGET_GROUP.NONE, -2);
	LuaDataAgt:SetFilter(FILTER_TYPE.HP, TARGET_GROUP.NONE, -2);
	
	-- 设置Buff公式
	LuaDataAgt:SetFormula(VALUE_CHG_TYPE.CHG_HP_BUFF, ThisScriptId, 0);
end

--Buff驱散条件判断
local function checkDeadCond(LuaDataAgt)
	
	return false;
end

--Buff驱散生效
local function runDead(LuaDataAgt)
	--属性加减回退
end

--Buff生效条件判断
local function checkEffectCond(LuaDataAgt)
	return true;
end

--Buff生效
local function takeEffect(LuaDataAgt)
	
end

--Buff过滤处理
local function doFilter(LuaDataAgt, iFilterType, rFilterOwner, FilterValue)
	-- Filter所有者是否是发起对象
	local IsSource = rFilterOwner:Equal(FilterValue:GetSource());
	
	if iFilterType == FILTER_TYPE.POS then
		-- 限制移动，不限制转向(临时）
		local limitPos = LuaDataAgt:GetCurPos();
		local destPos = Vector3(FilterValue.m_fFoo1, FilterValue.m_fFoo2, FilterValue.m_fFoo3);
		
		--print("limitPos--"..limitPos.x.."--"..limitPos.y.."--"..limitPos.z);
		--print("destPos--"..destPos.x.."--"..destPos.y.."--"..destPos.z);
		
		
		local newPos = limitPos +  Vector3.Normalize(destPos - limitPos) * 0.001;
		FilterValue.m_fFoo1 = newPos.x;
		FilterValue.m_fFoo2 = newPos.y;
		FilterValue.m_fFoo3 = newPos.z;
		
		--print("oRet.m_fFoo1--"..oRet.m_fFoo1.."--oRet.m_fFoo2--"..oRet.m_fFoo2.."--oRet.m_fFoo3--"..oRet.m_fFoo3);
	end
	
	if iFilterType == FILTER_TYPE.HP then
		if not IsSource then
			-- HP发起对象不是该Filter所属对象，则表示是被其他人照成的HP CHG
			-- 对Buff关联者同时作用
			local iHp = FilterValue.m_fFoo1;
			if iHp < 0 and FilterValue.m_iValueChgType ~= VALUE_CHG_TYPE.CHG_HP_BUFF then
				if not IsOnServer then
					-- 客户端处理方式
					local buffSource = LuaDataAgt:GetBuffSource();
					local listOwner = LuaDataAgt:GetBuffOwnerList();
					for i=0,listOwner.Count-1 do
						local rOwner = listOwner:get_Item(i);
						if  not rOwner:Equal(LuaDataAgt) then
							rOwner:ChgHp(VALUE_TYPE.CURRENT, iHp, buffSource, VALUE_CHG_TYPE.CHG_HP_BUFF, ThisScriptId, 0);
						end
					end
				else
					-- 服务器处理方式
					
				end
			end
		end
	end
	
	return FilterValue;
end

--Buff公式处理
local function doFormula(LuaDataAgt, iFormulaType, iFormulaPara, rSource, rTarget, iDamageRef)
    local target = LuaDataAgt:GetBuffSource();
    local stk = target:GetActiveSkillAdditionValue(2);
	local iRet = stk/100*iDamageRef;
	
	return iRet;
end

Buff_10123 = {
	func_runBorn = runBorn;
	func_checkDeadCond = checkDeadCond;
	func_runDead = runDead;
	func_checkEffectCond = checkEffectCond;
	func_takeEffect = takeEffect;
	
	func_doFilter = doFilter;
	func_doFormula = doFormula;
}