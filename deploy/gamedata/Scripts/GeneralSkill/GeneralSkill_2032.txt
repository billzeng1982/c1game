--[[
名称：烈火神弓
类型：主动技能
描述：攻击最远敌人，距离越远伤害越高，几率暴击
--]]
local ThisScriptId = 2032;

--技能诞生处理
local function runBorn(LuaDataAgt)
	-- 设置公式
	LuaDataAgt:SetFormula(VALUE_CHG_TYPE.CHG_HP_GENERALSKILL, ThisScriptId, 0);
end

--技能条件判断
local function checkCond(LuaDataAgt, AIId)
	--找之前先清一次
	LuaDataAgt:ClearTarget();

	local targetList;
	targetList = LuaDataAgt:FindTargetEx(TARGET_GROUP.ENEMY, SHAPE_TYPE.RECT, 0, 0, 15, 280);  --- 15 = （20 + 部队大小）/ 2
	--剔除死亡或回城部队，targetList也会随之改变
	LuaDataAgt:RemoveTroopDeadOrRetreat(targetList);
	-- 剔除不可见部队
	LuaDataAgt:RemoveTroopInVisible(targetList);
	LuaDataAgt:MapDrawRectangle(0,15,280,0,0);

	--AI操作需要至少命中n人，玩家操作无要求
	if (AIId == 0) then

	else
		if targetList.Count > 0 then
			return true;
		else
			return false;
		end
	end

	--小地图技能目标提示标志
	LuaDataAgt:SetMapSkillTarget(TARGET_GROUP.ENEMY);
	return true;

end

--找对象，上面条件满足后执行
local function findTarget(LuaDataAgt)
	--找之前先清一次
	LuaDataAgt:ClearTarget();
	local targetList;
	targetList = LuaDataAgt:FindTargetEx(TARGET_GROUP.ENEMY, SHAPE_TYPE.RECT, 0, 0, 15, 280);  --- 15 = （20 + 部队大小）/ 2
	--剔除死亡或回城部队，targetList也会随之改变
	LuaDataAgt:RemoveTroopDeadOrRetreat(targetList);
end

--技能生效，数值处理
local function takeEffect(LuaDataAgt)

	local targetList = LuaDataAgt:GetTargetList(TARGET_GROUP.ENEMY);

	for i=0,targetList.Count-1 do
		targetList:get_Item(i):ChgHp(VALUE_TYPE.CURRENT, 0, LuaDataAgt,VALUE_CHG_TYPE.CHG_HP_GENERALSKILL, ThisScriptId, 0);
	end

	LuaDataAgt:InterruptSiege();
end

--技能公式
local function doFormula(LuaDataAgt, iFormulaType, iFormulaPara, rSource, rTarget, iDamageRef)
	local StrAtk = rSource:GetStrAtk(VALUE_TYPE.CURRENT);
	local StrDef = rTarget:GetStrDef(VALUE_TYPE.CURRENT);
	local Base = rSource:GetActiveSkillBaseValue(1);
	local MinDmg = Base;
	local Ratio = rSource:GetActiveSkillRateValue(1);

	iRet = Base + (StrAtk - StrDef) * Ratio;
	
	local CritChance = rSource:GetAttribute(VALUE_TYPE.CURRENT, ATTR_TYPE.ATTR_CHANCE_CRITICAL) / 10;
	local i = math.random(1,100);
	--技能暴击率（自身暴击率+觉醒提升50%）
	if i <= (CritChance + 50) then
		local CritRatio = rSource:GetActiveSkillBaseValue(2) / 100;
		iRet = iRet * CritRatio;
		
		rTarget:SetDamageFxType(DAMAGE_FX_TYPE.DAMAGE_FX_CRITICAL);
	end

	iRet = math.max(iRet, MinDmg);
	return -iRet;
end

GeneralSkill_2032 = {
	func_runBorn = runBorn;
	func_checkCond = checkCond;
	func_findTarget = findTarget;
	func_takeEffect = takeEffect;
	
	func_doFormula = doFormula;
}